#include<stdio.h>
#include<string.h>

#define STACK_SIZE 40
#define LENGTH 30

void push(char, int*, char[]);
char pop(int*, char[]);
int F(char);
int G(char);
void infix_to_postfix(char[], char[]);

void main()
{
	char infix[LENGTH], postfix[LENGTH];
	
	printf("Conversion from infix to postfix\n");
	printf("Enter a valid Infix expression\n");
	
	scanf("%s",infix);

	infix_to_postfix(infix,postfix);
	
	printf("Converted Postfix expression is:\n%s\n", postfix);
}

void push(char item, int *top, char s[])
{
	if(*top == STACK_SIZE - 1)
	{
		printf("Stack Overflow\n");
		return;
	}
	s[++(*top)] = item;
}

char pop(int *top, char s[])
{
	char item_deleted;
	
	if(*top == -1)
		return 0;
	
	item_deleted = s[(*top)--];
	
	return item_deleted;
}

int G(char symbol)
{
	switch(symbol)
	{
		case '+':
		case '-':
			return 1;
		
		case '*':
		case '/':
			return 3;
		
		case '^':
		case '$':
			return 6;
		
		case '(':
			return 9;
		
		case ')':
			return 0;
		
		default:
			return 7;
	}
}

int F(char symbol)
{
	switch(symbol)
	{
		case '+':
		case '-':
			return 2;
		
		case '*':
		case '/':
			return 4;
		
		case '^':
		case '$':
			return 5;
		
		case '(':
			return 0;
		
		case '#':
			return -1;
		
		default:
			return 8;
	}
}

void infix_to_postfix(char infix[],char postfix[])
{
	int top, i, j;
	char s[STACK_SIZE], symbol;
	
	top = -1;
	push('#', &top, s);
	j = 0;
	
	for(i = 0; i < strlen(infix); i++)
	{
		symbol = infix[i];
		
		while(F(s[top]) > G(symbol))
		{
			postfix[j] = pop(&top, s);
			j++;
		}
		
		if(F(s[top]) != G(symbol))
			push(symbol, &top, s);
		else
			pop(&top, s);
	}
	
	while(s[top] != '#')
	{
		postfix[j] = pop(&top, s);
		j++;
	}
	 
	postfix[j] = '\0';
}
